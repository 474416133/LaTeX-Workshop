{
  "Bqty": {
    "command": "Bqty",
    "snippet": "Bqty{${1:expression}}"
  },
  "Im": {
    "command": "Im",
    "snippet": "Im{${1:expression}}"
  },
  "PV": {
    "command": "PV",
    "snippet": "PV{${1:expression}}"
  },
  "Pmqty": {
    "command": "Pmqty",
    "snippet": "Pmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "Pr(expression)": {
    "command": "Pr(expression)",
    "snippet": "Pr(expression)"
  },
  "Probability": {
    "command": "Probability",
    "snippet": "Probability"
  },
  "Res[]": {
    "command": "Res[expression]",
    "snippet": "Res[${1:expression}]"
  },
  "Re": {
    "command": "Re",
    "snippet": "Re{${1:expression}}"
  },
  "Tr": {
    "command": "Tr",
    "snippet": "Tr"
  },
  "Trace": {
    "command": "Trace",
    "snippet": "Trace"
  },
  "abs*": {
    "command": "abs*",
    "snippet": "abs*{${1:expression}}"
  },
  "absolutevalue": {
    "command": "absolutevalue",
    "snippet": "absolutevalue{${1:expression}}"
  },
  "abs": {
    "command": "abs",
    "snippet": "abs{${1:expression}}"
  },
  "acomm*": {
    "command": "acomm*",
    "snippet": "acomm*{${1:expression1}}{${2:expression2}}"
  },
  "acomm": {
    "command": "acomm",
    "snippet": "acomm{${1:expression1}}{${2:expression2}}"
  },
  "acos(expression)": {
    "command": "acos(expression)",
    "snippet": "acos(expression)"
  },
  "acos[](expression)": {
    "command": "acos[power](expression)",
    "snippet": "acos[${1:power}](expression)"
  },
  "acosecant": {
    "command": "acosecant",
    "snippet": "acosecant"
  },
  "acosine": {
    "command": "acosine",
    "snippet": "acosine"
  },
  "acot(expression)": {
    "command": "acot(expression)",
    "snippet": "acot(expression)"
  },
  "acot[](expression)": {
    "command": "acot[power](expression)",
    "snippet": "acot[${1:power}](expression)"
  },
  "acotangent": {
    "command": "acotangent",
    "snippet": "acotangent"
  },
  "acsc(expression)": {
    "command": "acsc(expression)",
    "snippet": "acsc(expression)"
  },
  "acsc[](expression)": {
    "command": "acsc[power](expression)",
    "snippet": "acsc[${1:power}](expression)"
  },
  "anticommutator": {
    "command": "anticommutator",
    "snippet": "anticommutator{${1:expression1}}{${2:expression2}}"
  },
  "arccos(expression)": {
    "command": "arccos(expression)",
    "snippet": "arccos(expression)"
  },
  "arccos[](expression)": {
    "command": "arccos[power](expression)",
    "snippet": "arccos[${1:power}](expression)"
  },
  "arccosecant": {
    "command": "arccosecant",
    "snippet": "arccosecant"
  },
  "arccosine": {
    "command": "arccosine",
    "snippet": "arccosine"
  },
  "arccot(expression)": {
    "command": "arccot(expression)",
    "snippet": "arccot(expression)"
  },
  "arccot[](expression)": {
    "command": "arccot[power](expression)",
    "snippet": "arccot[${1:power}](expression)"
  },
  "arccotangent": {
    "command": "arccotangent",
    "snippet": "arccotangent"
  },
  "arccsc(expression)": {
    "command": "arccsc(expression)",
    "snippet": "arccsc(expression)"
  },
  "arccsc[](expression)": {
    "command": "arccsc[power](expression)",
    "snippet": "arccsc[${1:power}](expression)"
  },
  "arcsec(expression)": {
    "command": "arcsec(expression)",
    "snippet": "arcsec(expression)"
  },
  "arcsec[](expression)": {
    "command": "arcsec[power](expression)",
    "snippet": "arcsec[${1:power}](expression)"
  },
  "arcsecant": {
    "command": "arcsecant",
    "snippet": "arcsecant"
  },
  "arcsin(expression)": {
    "command": "arcsin(expression)",
    "snippet": "arcsin(expression)"
  },
  "arcsin[](expression)": {
    "command": "arcsin[power](expression)",
    "snippet": "arcsin[${1:power}](expression)"
  },
  "arcsine": {
    "command": "arcsine",
    "snippet": "arcsine"
  },
  "arctan(expression)": {
    "command": "arctan(expression)",
    "snippet": "arctan(expression)"
  },
  "arctan[](expression)": {
    "command": "arctan[power](expression)",
    "snippet": "arctan[${1:power}](expression)"
  },
  "arctangent": {
    "command": "arctangent",
    "snippet": "arctangent"
  },
  "asec(expression)": {
    "command": "asec(expression)",
    "snippet": "asec(expression)"
  },
  "asec[](expression)": {
    "command": "asec[power](expression)",
    "snippet": "asec[${1:power}](expression)"
  },
  "asecant": {
    "command": "asecant",
    "snippet": "asecant"
  },
  "asin(expression)": {
    "command": "asin(expression)",
    "snippet": "asin(expression)"
  },
  "asin[](expression)": {
    "command": "asin[power](expression)",
    "snippet": "asin[${1:power}](expression)"
  },
  "asine": {
    "command": "asine",
    "snippet": "asine"
  },
  "atan(expression)": {
    "command": "atan(expression)",
    "snippet": "atan(expression)"
  },
  "atan[](expression)": {
    "command": "atan[power](expression)",
    "snippet": "atan[${1:power}](expression)"
  },
  "atangent": {
    "command": "atangent",
    "snippet": "atangent"
  },
  "bmqty": {
    "command": "bmqty",
    "snippet": "bmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "bqty": {
    "command": "bqty",
    "snippet": "bqty{${1:expression}}"
  },
  "bra*": {
    "command": "bra*",
    "snippet": "bra*{${1:expression}}"
  },
  "braket*": {
    "command": "braket*",
    "snippet": "braket*{${1:expression1}}{${2:expression2}}"
  },
  "braket": {
    "command": "braket",
    "snippet": "braket{${1:expression1}}{${2:expression2}}"
  },
  "bra": {
    "command": "bra",
    "snippet": "bra{${1:expression}}"
  },
  "comm*": {
    "command": "comm*",
    "snippet": "comm*{${1:expression1}}{${2:expression2}}"
  },
  "commutator": {
    "command": "commutator",
    "snippet": "commutator{${1:expression1}}{${2:expression2}}"
  },
  "comm": {
    "command": "comm",
    "snippet": "comm{${1:expression1}}{${2:expression2}}"
  },
  "cos(expression)": {
    "command": "cos(expression)",
    "snippet": "cos(expression)"
  },
  "cos[](expression)": {
    "command": "cos[power](expression)",
    "snippet": "cos[${1:power}](expression)"
  },
  "cosecant": {
    "command": "cosecant",
    "snippet": "cosecant"
  },
  "cosh(expression)": {
    "command": "cosh(expression)",
    "snippet": "cosh(expression)"
  },
  "cosh[](expression)": {
    "command": "cosh[power](expression)",
    "snippet": "cosh[${1:power}](expression)"
  },
  "cosine": {
    "command": "cosine",
    "snippet": "cosine"
  },
  "cot(expression)": {
    "command": "cot(expression)",
    "snippet": "cot(expression)"
  },
  "cot[](expression)": {
    "command": "cot[power](expression)",
    "snippet": "cot[${1:power}](expression)"
  },
  "cotangent": {
    "command": "cotangent",
    "snippet": "cotangent"
  },
  "coth(expression)": {
    "command": "coth(expression)",
    "snippet": "coth(expression)"
  },
  "coth[](expression)": {
    "command": "coth[power](expression)",
    "snippet": "coth[${1:power}](expression)"
  },
  "cp": {
    "command": "cp",
    "snippet": "cp"
  },
  "cross": {
    "command": "cross",
    "snippet": "cross"
  },
  "crossproduct": {
    "command": "crossproduct",
    "snippet": "crossproduct"
  },
  "csc(expression)": {
    "command": "csc(expression)",
    "snippet": "csc(expression)"
  },
  "csc[](expression)": {
    "command": "csc[power](expression)",
    "snippet": "csc[${1:power}](expression)"
  },
  "csch(expression)": {
    "command": "csch(expression)",
    "snippet": "csch(expression)"
  },
  "csch[](expression)": {
    "command": "csch[power](expression)",
    "snippet": "csch[${1:power}](expression)"
  },
  "curl": {
    "command": "curl",
    "snippet": "curl{${1:expression}}"
  },
  "curl(expression)": {
    "command": "curl(expression)",
    "snippet": "curl(expression)"
  },
  "curl*(expression)": {
    "command": "curl*(expression)",
    "snippet": "curl*(expression)"
  },
  "curl*[]": {
    "command": "curl*[expression]",
    "snippet": "curl*[${1:expression}]"
  },
  "curl[]": {
    "command": "curl[expression]",
    "snippet": "curl[${1:expression}]"
  },
  "dd": {
    "command": "dd",
    "snippet": "dd{${1:expression}}"
  },
  "dd(expression)": {
    "command": "dd(expression)",
    "snippet": "dd(expression)"
  },
  "dd[]{}": {
    "command": "dd[power]{expression}",
    "snippet": "dd[${2:power}]{${1:expression}}"
  },
  "derivative": {
    "command": "derivative",
    "snippet": "derivative{${1:function}}{${2:expression}}"
  },
  "det(expression)": {
    "command": "det(expression)",
    "snippet": "det(expression)"
  },
  "determinant": {
    "command": "determinant",
    "snippet": "determinant"
  },
  "differential": {
    "command": "differential",
    "snippet": "differential"
  },
  "div(expression)": {
    "command": "div(expression)",
    "snippet": "div(expression)"
  },
  "div*(expression)": {
    "command": "div*(expression)",
    "snippet": "div*(expression)"
  },
  "div*[]": {
    "command": "div*[expression]",
    "snippet": "div*[${1:expression}]"
  },
  "div[]": {
    "command": "div[expression]",
    "snippet": "div[${1:expression}]"
  },
  "divergence": {
    "command": "divergence",
    "snippet": "divergence{${1:expression}}"
  },
  "divisionsymbol": {
    "command": "divisionsymbol",
    "snippet": "divisionsymbol"
  },
  "dotproduct": {
    "command": "dotproduct",
    "snippet": "dotproduct"
  },
  "dv*": {
    "command": "dv*",
    "snippet": "dv*{${1:function}}{${2:expression}}"
  },
  "dv[]{}{}": {
    "command": "dv[power]{function}{expression}",
    "snippet": "dv[${3:power}]{${1:function}}{${2:expression}}"
  },
  "dv": {
    "command": "dv",
    "snippet": "dv{${1:function}}{${2:expression}}"
  },
  "dyad*": {
    "command": "dyad*",
    "snippet": "dyad*{${1:expression1}}{${2:expression2}}"
  },
  "dyad": {
    "command": "dyad",
    "snippet": "dyad{${1:expression}}"
  },
  "erf(expression)": {
    "command": "erf(expression)",
    "snippet": "erf(expression)"
  },
  "ev**": {
    "command": "ev**",
    "snippet": "ev**{${1:expression1}}{${2:expression2}}"
  },
  "ev*": {
    "command": "ev*",
    "snippet": "ev*{${1:expression1}}{${2:expression2}}"
  },
  "eval(expression|_": {
    "command": "eval(expression|_",
    "snippet": "eval(expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "eval*(expression|_": {
    "command": "eval*(expression|_",
    "snippet": "eval*(expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "eval*[expression|_{}^{}": {
    "command": "eval*[expression|_{limit1}^{limit2}",
    "snippet": "eval*[expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "eval*": {
    "command": "eval*",
    "snippet": "eval*{${1:expression}}_{${2:limit1}}^{${3:limit2}}"
  },
  "eval[expression|_{}^{}": {
    "command": "eval[expression|_{limit1}^{limit2}",
    "snippet": "eval[expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "evaluated": {
    "command": "evaluated",
    "snippet": "evaluated{${1:expression}}_{${2:limit1}}^{${3:limit2}}"
  },
  "eval": {
    "command": "eval",
    "snippet": "eval{${1:expression}}_{${2:limit1}}^{${3:limit2}}"
  },
  "ev": {
    "command": "ev",
    "snippet": "ev{${1:expression}}"
  },
  "exp(expression)": {
    "command": "exp(expression)",
    "snippet": "exp(expression)"
  },
  "expectationvalue": {
    "command": "expectationvalue",
    "snippet": "expectationvalue{${1:expression1}}{${2:expression2}}"
  },
  "exponential": {
    "command": "exponential",
    "snippet": "exponential"
  },
  "expval*": {
    "command": "expval*",
    "snippet": "expval*{${1:expression1}}{${2:expression2}}"
  },
  "expval": {
    "command": "expval",
    "snippet": "expval{${1:expression}}"
  },
  "fdv*": {
    "command": "fdv*",
    "snippet": "fdv*{${1:function}}{${2:expression}}"
  },
  "fdv": {
    "command": "fdv",
    "snippet": "fdv{${1:function}}{${2:expression}}"
  },
  "flatfrac": {
    "command": "flatfrac",
    "snippet": "flatfrac{${1:expression1}}(expression2)"
  },
  "functionalderivative": {
    "command": "functionalderivative",
    "snippet": "functionalderivative{${1:function}}{${2:expression}}"
  },
  "grad": {
    "command": "grad",
    "snippet": "grad{${1:expression}}"
  },
  "grad(expression)": {
    "command": "grad(expression)",
    "snippet": "grad(expression)"
  },
  "grad*(expression)": {
    "command": "grad*(expression)",
    "snippet": "grad*(expression)"
  },
  "grad*[]": {
    "command": "grad*[expression]",
    "snippet": "grad*[${1:expression}]"
  },
  "grad[]": {
    "command": "grad[expression]",
    "snippet": "grad[${1:expression}]"
  },
  "gradient": {
    "command": "gradient",
    "snippet": "gradient{${1:expression}}"
  },
  "hypcosecant": {
    "command": "hypcosecant",
    "snippet": "hypcosecant"
  },
  "hypcosine": {
    "command": "hypcosine",
    "snippet": "hypcosine"
  },
  "hypcotangent": {
    "command": "hypcotangent",
    "snippet": "hypcotangent"
  },
  "hypsecant": {
    "command": "hypsecant",
    "snippet": "hypsecant"
  },
  "hypsine": {
    "command": "hypsine",
    "snippet": "hypsine"
  },
  "hyptangent": {
    "command": "hyptangent",
    "snippet": "hyptangent"
  },
  "imaginary": {
    "command": "imaginary",
    "snippet": "imaginary"
  },
  "innerproduct": {
    "command": "innerproduct",
    "snippet": "innerproduct{${1:expression1}}{${2:expression2}}"
  },
  "ip*": {
    "command": "ip*",
    "snippet": "ip*{${1:expression1}}{${2:expression2}}"
  },
  "ip": {
    "command": "ip",
    "snippet": "ip{${1:expression1}}{${2:expression2}}"
  },
  "ket*": {
    "command": "ket*",
    "snippet": "ket*{${1:expression}}"
  },
  "ketbra*": {
    "command": "ketbra*",
    "snippet": "ketbra*{${1:expression1}}{${2:expression2}}"
  },
  "ketbra": {
    "command": "ketbra",
    "snippet": "ketbra{${1:expression1}}{${2:expression2}}"
  },
  "ket": {
    "command": "ket",
    "snippet": "ket{${1:expression}}"
  },
  "laplacian": {
    "command": "laplacian",
    "snippet": "laplacian{${1:expression}}"
  },
  "laplacian(expression)": {
    "command": "laplacian(expression)",
    "snippet": "laplacian(expression)"
  },
  "laplacian*(expression)": {
    "command": "laplacian*(expression)",
    "snippet": "laplacian*(expression)"
  },
  "laplacian*[]": {
    "command": "laplacian*[expression]",
    "snippet": "laplacian*[${1:expression}]"
  },
  "laplacian[]": {
    "command": "laplacian[expression]",
    "snippet": "laplacian[${1:expression}]"
  },
  "ln(expression)": {
    "command": "ln(expression)",
    "snippet": "ln(expression)"
  },
  "log(expression)": {
    "command": "log(expression)",
    "snippet": "log(expression)"
  },
  "logarithm": {
    "command": "logarithm",
    "snippet": "logarithm"
  },
  "matrixdeterminant": {
    "command": "matrixdeterminant",
    "snippet": "matrixdeterminant{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}}"
  },
  "matrixel*": {
    "command": "matrixel*",
    "snippet": "matrixel*{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixelement*": {
    "command": "matrixelement*",
    "snippet": "matrixelement*{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixelement": {
    "command": "matrixelement",
    "snippet": "matrixelement{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixel": {
    "command": "matrixel",
    "snippet": "matrixel{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixquantity(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)": {
    "command": "matrixquantity(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)",
    "snippet": "matrixquantity(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)"
  },
  "matrixquantity": {
    "command": "matrixquantity",
    "snippet": "matrixquantity{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "mdet": {
    "command": "mdet",
    "snippet": "mdet{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}}"
  },
  "mel**": {
    "command": "mel**",
    "snippet": "mel**{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "mel*": {
    "command": "mel*",
    "snippet": "mel*{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "mel": {
    "command": "mel",
    "snippet": "mel{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "mqty(\\admat": {
    "command": "mqty(\\admat",
    "snippet": "mqty(\\admat{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\antidiagonalmatrix": {
    "command": "mqty(\\antidiagonalmatrix",
    "snippet": "mqty(\\antidiagonalmatrix{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\diagonalmatrix": {
    "command": "mqty(\\diagonalmatrix",
    "snippet": "mqty(\\diagonalmatrix{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\dmat[]{})": {
    "command": "mqty(\\dmat[matrix element]{matrix element 1,matrix element 2,matrix element 3,...})",
    "snippet": "mqty(\\dmat[${2:matrix element}]{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\dmat": {
    "command": "mqty(\\dmat",
    "snippet": "mqty(\\dmat{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\identitymatrix": {
    "command": "mqty(\\identitymatrix",
    "snippet": "mqty(\\identitymatrix{${1:number}})"
  },
  "mqty(\\imat": {
    "command": "mqty(\\imat",
    "snippet": "mqty(\\imat{${1:number}})"
  },
  "mqty(\\paulimatrix": {
    "command": "mqty(\\paulimatrix",
    "snippet": "mqty(\\paulimatrix{${1:n}})"
  },
  "mqty(\\pmat": {
    "command": "mqty(\\pmat",
    "snippet": "mqty(\\pmat{${1:n}})"
  },
  "mqty(\\xmat*": {
    "command": "mqty(\\xmat*",
    "snippet": "mqty(\\xmat*{${1:matrix element star for element indices }}{${2:n}}{${3:m}})"
  },
  "mqty(\\xmatrix": {
    "command": "mqty(\\xmatrix",
    "snippet": "mqty(\\xmatrix{${1:matrix element}}{${2:n}}{${3:m}})"
  },
  "mqty(\\xmat": {
    "command": "mqty(\\xmat",
    "snippet": "mqty(\\xmat{${1:matrix element}}{${2:n}}{${3:m}})"
  },
  "mqty(\\zeromatrix": {
    "command": "mqty(\\zeromatrix",
    "snippet": "mqty(\\zeromatrix{${1:n}}{${2:m}})"
  },
  "mqty(\\zmat": {
    "command": "mqty(\\zmat",
    "snippet": "mqty(\\zmat{${1:n}}{${2:m}})"
  },
  "mqty(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)": {
    "command": "mqty(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)",
    "snippet": "mqty(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)"
  },
  "mqty*(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)": {
    "command": "mqty*(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)",
    "snippet": "mqty*(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)"
  },
  "mqty[]": {
    "command": "mqty[matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4]",
    "snippet": "mqty[${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}]"
  },
  "mqty": {
    "command": "mqty",
    "snippet": "mqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "mqty|matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4|": {
    "command": "mqty|matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4|",
    "snippet": "mqty|matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4|"
  },
  "naturallogarithm": {
    "command": "naturallogarithm",
    "snippet": "naturallogarithm"
  },
  "norm*": {
    "command": "norm*",
    "snippet": "norm*{${1:expression}}"
  },
  "norm": {
    "command": "norm",
    "snippet": "norm{${1:expression}}"
  },
  "op*": {
    "command": "op*",
    "snippet": "op*{${1:expression1}}{${2:expression2}}"
  },
  "op": {
    "command": "op",
    "snippet": "op{${1:expression1}}{${2:expression2}}"
  },
  "order*": {
    "command": "order*",
    "snippet": "order*{${1:expression}}"
  },
  "order": {
    "command": "order",
    "snippet": "order{${1:expression}}"
  },
  "outerproduct": {
    "command": "outerproduct",
    "snippet": "outerproduct{${1:expression1}}{${2:expression2}}"
  },
  "partialderivative": {
    "command": "partialderivative",
    "snippet": "partialderivative{${1:function}}{${2:expression}}"
  },
  "pb*": {
    "command": "pb*",
    "snippet": "pb*{${1:expression1}}{${2:expression2}}"
  },
  "pb": {
    "command": "pb",
    "snippet": "pb{${1:expression1}}{${2:expression2}}"
  },
  "pderivative": {
    "command": "pderivative",
    "snippet": "pderivative{${1:expression}}"
  },
  "pdv*": {
    "command": "pdv*",
    "snippet": "pdv*{${1:f}}{${2:x}}"
  },
  "pdv[]{}{}": {
    "command": "pdv[power]{function}{expression}",
    "snippet": "pdv[${3:power}]{${1:function}}{${2:expression}}"
  },
  "pdv": {
    "command": "pdv",
    "snippet": "pdv{${1:f}}{${2:x}}{${3:y}}"
  },
  "pmqty": {
    "command": "pmqty",
    "snippet": "pmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "poissonbracket": {
    "command": "poissonbracket",
    "snippet": "poissonbracket{${1:expression1}}{${2:expression2}}"
  },
  "pqty": {
    "command": "pqty",
    "snippet": "pqty{${1:expression}}"
  },
  "pv": {
    "command": "pv",
    "snippet": "pv{${1:expression}}"
  },
  "qall": {
    "command": "qall",
    "snippet": "qall"
  },
  "qall*": {
    "command": "qall*",
    "snippet": "qall*"
  },
  "qand": {
    "command": "qand",
    "snippet": "qand"
  },
  "qand*": {
    "command": "qand*",
    "snippet": "qand*"
  },
  "qas": {
    "command": "qas",
    "snippet": "qas"
  },
  "qas*": {
    "command": "qas*",
    "snippet": "qas*"
  },
  "qassume": {
    "command": "qassume",
    "snippet": "qassume"
  },
  "qassume*": {
    "command": "qassume*",
    "snippet": "qassume*"
  },
  "qcc": {
    "command": "qcc",
    "snippet": "qcc"
  },
  "qcc*": {
    "command": "qcc*",
    "snippet": "qcc*"
  },
  "qcomma": {
    "command": "qcomma",
    "snippet": "qcomma{${1:word or phrase}}"
  },
  "qc": {
    "command": "qc",
    "snippet": "qc{${1:word or phrase}}"
  },
  "qelse": {
    "command": "qelse",
    "snippet": "qelse"
  },
  "qelse*": {
    "command": "qelse*",
    "snippet": "qelse*"
  },
  "qeven": {
    "command": "qeven",
    "snippet": "qeven"
  },
  "qeven*": {
    "command": "qeven*",
    "snippet": "qeven*"
  },
  "qfor": {
    "command": "qfor",
    "snippet": "qfor"
  },
  "qfor*": {
    "command": "qfor*",
    "snippet": "qfor*"
  },
  "qgiven": {
    "command": "qgiven",
    "snippet": "qgiven"
  },
  "qgiven*": {
    "command": "qgiven*",
    "snippet": "qgiven*"
  },
  "qif": {
    "command": "qif",
    "snippet": "qif"
  },
  "qif*": {
    "command": "qif*",
    "snippet": "qif*"
  },
  "qin": {
    "command": "qin",
    "snippet": "qin"
  },
  "qin*": {
    "command": "qin*",
    "snippet": "qin*"
  },
  "qinteger": {
    "command": "qinteger",
    "snippet": "qinteger"
  },
  "qinteger*": {
    "command": "qinteger*",
    "snippet": "qinteger*"
  },
  "qlet": {
    "command": "qlet",
    "snippet": "qlet"
  },
  "qlet*": {
    "command": "qlet*",
    "snippet": "qlet*"
  },
  "qodd": {
    "command": "qodd",
    "snippet": "qodd"
  },
  "qodd*": {
    "command": "qodd*",
    "snippet": "qodd*"
  },
  "qor": {
    "command": "qor",
    "snippet": "qor"
  },
  "qor*": {
    "command": "qor*",
    "snippet": "qor*"
  },
  "qotherwise": {
    "command": "qotherwise",
    "snippet": "qotherwise"
  },
  "qotherwise*": {
    "command": "qotherwise*",
    "snippet": "qotherwise*"
  },
  "qq*": {
    "command": "qq*",
    "snippet": "qq*{${1:word or phrase}}"
  },
  "qq": {
    "command": "qq",
    "snippet": "qq{${1:word or phrase}}"
  },
  "qsince": {
    "command": "qsince",
    "snippet": "qsince"
  },
  "qsince*": {
    "command": "qsince*",
    "snippet": "qsince*"
  },
  "qthen": {
    "command": "qthen",
    "snippet": "qthen"
  },
  "qthen*": {
    "command": "qthen*",
    "snippet": "qthen*"
  },
  "qty(expression)": {
    "command": "qty(expression)",
    "snippet": "qty(expression)"
  },
  "qty[]": {
    "command": "qty[expression]",
    "snippet": "qty[${1:expression}]"
  },
  "qty": {
    "command": "qty",
    "snippet": "qty{${1:expression}}"
  },
  "qty|expression|": {
    "command": "qty|expression|",
    "snippet": "qty|expression|"
  },
  "quantity": {
    "command": "quantity",
    "snippet": "quantity"
  },
  "qunless": {
    "command": "qunless",
    "snippet": "qunless"
  },
  "qunless*": {
    "command": "qunless*",
    "snippet": "qunless*"
  },
  "qusing": {
    "command": "qusing",
    "snippet": "qusing"
  },
  "qusing*": {
    "command": "qusing*",
    "snippet": "qusing*"
  },
  "rank": {
    "command": "rank",
    "snippet": "rank"
  },
  "real": {
    "command": "real",
    "snippet": "real"
  },
  "sPmqty": {
    "command": "sPmqty",
    "snippet": "sPmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "sbmqty": {
    "command": "sbmqty",
    "snippet": "sbmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "sec(expression)": {
    "command": "sec(expression)",
    "snippet": "sec(expression)"
  },
  "sec[](expression)": {
    "command": "sec[power](expression)",
    "snippet": "sec[${1:power}](expression)"
  },
  "secant": {
    "command": "secant",
    "snippet": "secant"
  },
  "sech(expression)": {
    "command": "sech(expression)",
    "snippet": "sech(expression)"
  },
  "sech[](expression)": {
    "command": "sech[power](expression)",
    "snippet": "sech[${1:power}](expression)"
  },
  "sin(expression)": {
    "command": "sin(expression)",
    "snippet": "sin(expression)"
  },
  "sin[](expression)": {
    "command": "sin[power](expression)",
    "snippet": "sin[${1:power}](expression)"
  },
  "sine": {
    "command": "sine",
    "snippet": "sine"
  },
  "sinh(expression)": {
    "command": "sinh(expression)",
    "snippet": "sinh(expression)"
  },
  "sinh[](expression)": {
    "command": "sinh[power](expression)",
    "snippet": "sinh[${1:power}](expression)"
  },
  "smallmatrixquantity": {
    "command": "smallmatrixquantity",
    "snippet": "smallmatrixquantity{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "smdet": {
    "command": "smdet",
    "snippet": "smdet{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}}"
  },
  "smqty(": {
    "command": "smqty(",
    "snippet": "smqty({${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}})"
  },
  "smqty*(": {
    "command": "smqty*(",
    "snippet": "smqty*({${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}})"
  },
  "smqty[{]": {
    "command": "smqty[{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}]",
    "snippet": "smqty[{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}]"
  },
  "smqty": {
    "command": "smqty",
    "snippet": "smqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "smqty|": {
    "command": "smqty|",
    "snippet": "smqty|{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}|"
  },
  "spmqty": {
    "command": "spmqty",
    "snippet": "spmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "svmqty": {
    "command": "svmqty",
    "snippet": "svmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "tan(expression)": {
    "command": "tan(expression)",
    "snippet": "tan(expression)"
  },
  "tan[](expression)": {
    "command": "tan[power](expression)",
    "snippet": "tan[${1:power}](expression)"
  },
  "tangent": {
    "command": "tangent",
    "snippet": "tangent"
  },
  "tanh(expression)": {
    "command": "tanh(expression)",
    "snippet": "tanh(expression)"
  },
  "tanh[](expression)": {
    "command": "tanh[power](expression)",
    "snippet": "tanh[${1:power}](expression)"
  },
  "tr": {
    "command": "tr",
    "snippet": "tr"
  },
  "tr(expression)": {
    "command": "tr(expression)",
    "snippet": "tr(expression)"
  },
  "trace": {
    "command": "trace",
    "snippet": "trace"
  },
  "va*": {
    "command": "va*",
    "snippet": "va*{${1:expression}}"
  },
  "var(expression)": {
    "command": "var(expression)",
    "snippet": "var(expression)"
  },
  "variation": {
    "command": "variation",
    "snippet": "variation{${1:expression}}"
  },
  "var": {
    "command": "var",
    "snippet": "var{${1:expression}}"
  },
  "va": {
    "command": "va",
    "snippet": "va{${1:expression}}"
  },
  "vb*": {
    "command": "vb*",
    "snippet": "vb*{${1:expression}}"
  },
  "vb": {
    "command": "vb",
    "snippet": "vb{${1:expression}}"
  },
  "vdot": {
    "command": "vdot",
    "snippet": "vdot"
  },
  "vectorarrow": {
    "command": "vectorarrow",
    "snippet": "vectorarrow{${1:expression}}"
  },
  "vectorbold": {
    "command": "vectorbold",
    "snippet": "vectorbold{${1:expression}}"
  },
  "vectorunit": {
    "command": "vectorunit",
    "snippet": "vectorunit{${1:expression}}"
  },
  "vmqty": {
    "command": "vmqty",
    "snippet": "vmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "vqty": {
    "command": "vqty",
    "snippet": "vqty{${1:expression}}"
  },
  "vu*": {
    "command": "vu*",
    "snippet": "vu*{${1:expression}}"
  },
  "vu": {
    "command": "vu",
    "snippet": "vu{${1:expression}}"
  },
  "diagonalmatrix": {
    "command": "diagonalmatrix",
    "snippet": "diagonalmatrix{${1:matrix element 1,matrix element 2,...}}"
  },
  "dmat": {
    "command": "dmat",
    "snippet": "dmat{${1:matrix element 1,matrix element 2,...}}"
  },
  "antidiagonalmatrix": {
    "command": "antidiagonalmatrix",
    "snippet": "antidiagonalmatrix{${1:matrix element 1,matrix element 2,...}}"
  },
  "admat": {
    "command": "admat",
    "snippet": "admat{${1:matrix element 1,matrix element 2,...}}"
  },
  "identitymatrix": {
    "command": "identitymatrix",
    "snippet": "identitymatrix{${1:n}}"
  },
  "imat": {
    "command": "imat",
    "snippet": "imat{${1:n}}"
  },
  "paulimatrix": {
    "command": "paulimatrix",
    "snippet": "paulimatrix{${1:n}}"
  },
  "pmat": {
    "command": "pmat",
    "snippet": "pmat{${1:n}}"
  },
  "xmatrix": {
    "command": "xmatrix",
    "snippet": "xmatrix{${1:matrix element}}{${2:n}}{${3:m}}"
  },
  "xmat": {
    "command": "xmat",
    "snippet": "xmat{${1:matrix element}}{${2:n}}{${3:m}}"
  },
  "zeromatrix": {
    "command": "zeromatrix",
    "snippet": "zeromatrix{${1:n}}{${2:m}}"
  },
  "zmat": {
    "command": "zmat",
    "snippet": "zmat{${1:n}}{${2:m}}"
  }
}